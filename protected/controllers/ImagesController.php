<?php

class ImagesController extends ApiController {

    private $_meals_photos_dir;
    private $_avatars_dir;

    /**
     * Variable to define image name in $_FILES
     * @var string
     */
    private $_image_field_name;

    /**
     * Variable for Photos model
     * @var object
     */
    private $_photo;

    /**
     * Image name that was generated by ImagesManager
     * @var string
     */
    private $_new_image_name;

    /**
     *
     * @var string
     */
    private $_photo_path;

    /**
     *
     * @var string
     */
    private $_meal_dir;

    public function beforeAction($action) {
        $this->_meals_photos_dir = helper::getMealsPhotosDir();
        if (!is_dir($this->_meals_photos_dir))
            mkdir($this->_meals_photos_dir, 0755);

        $this->_avatars_dir = helper::getAvatarsDir();
        if (!is_dir($this->_avatars_dir))
            mkdir($this->_avatars_dir, 0755);

        return parent::beforeAction($action);
    }

    /**
     * With this action user can take meal photos thumbnails
     * @param integer $meal_id
     */
    function actionMealPhotos($meal_id) {
        /*
         * Is meal with $id exists
         */
        if (!$meal = Meals::model()->findByPk($meal_id))
            $this->_apiHelper->sendResponse(400, array('errors' => sprintf(Constants::NO_MEAL_WAS_FOUND, $meal_id)));
        /*
         * Is meal have photos
         */
        if (!$photos = Photos::model()->findAllByAttributes(array('access_status' => Constants::ACCESS_STATUS_PUBLISHED, 'meal_id' => $meal->id)))
            $this->_apiHelper->sendResponse(400, array('errors' => sprintf(Constants::NO_MEAL_IMAGES, $meal_id)));


        $results = array();
        $this->_meal_dir = ImagesManager::getMealWebPath($meal->id);
        $imagesManager = Yii::app()->imagesManager;
        /*
         * getting thumbnails for each photo
         */
        foreach ($photos as $photo) {

            $photo_thumbnails = $imagesManager
                    ->setImagePath($this->_meal_dir . $photo->name)
                    ->setSizes(helper::yiiparam('sizes_for_photos_of_meals'))
                    ->getImageThumbnails();

            $photo_info = $photo->filterByRole($this->_user_role);
            $photo_info['thumbnails'] = $photo_thumbnails;
            $results[] = $photo_info;
        }

        $this->_apiHelper->sendResponse(200, array('results' => $results));
    }

    /**
     * With this action user can upload photos for meal
     * @param integer $id of existing meal
     */
    public function actionAddMealPhoto($id) {

        /* is meal with $id exists */
        $meal = BaseChecker::isMeal($id, $this->_apiHelper);


        if ($meal->access_status !== Constants::ACCESS_STATUS_NEEDS_FOR_ACTION)
            $this->_apiHelper->sendResponse(400, array('message' => 'You can\'t add photo to this meal'));

        $this->_image_field_name = 'image';
        $this->_setPhoto($meal->id);

        /* on validate we save photo */
        if ($this->_photo->save()) {
            $this->_setPhotosPath($meal->id);
            if ($this->_photo->image->saveAs($this->_photo_path)) {
                /* Create thimbnails for meal photo for registered image sizes */
                $images_manager = Yii::app()->imagesManager;
                $images_manager
                        ->setImagePath($this->_photo_path)
                        ->setSaveTo($this->_meal_dir)
                        ->setExt($this->_photo->image->extensionName)
                        ->setPrefix($this->_new_image_name . '_')
                        ->setSizes(helper::yiiparam('sizes_for_photos_of_meals'))
                        ->makeThumbnails();

                if ($meal->access_status === Constants::ACCESS_STATUS_NEEDS_FOR_ACTION) {
                    $meal->accessStatus(Constants::ACCESS_STATUS_PUBLISHED);
                    $rating = Ratings::model()->findByAttributes(array(
                        'meal_id' => $id,
                        'user_id' => $this->_user_info['id'],
                        'photo_id' => NULL,
                        'access_status' => Constants::ACCESS_STATUS_NEEDS_FOR_ACTION
                            ));
                    if ($rating) {
                        Ratings::model()->updateByPk($rating->id, array(
                            'access_status' => Constants::ACCESS_STATUS_PUBLISHED,
                            'photo_id' => $this->_photo->id
                        ));
                    }
                }
                Photos::makeDefaultPhoto($meal->id);
                $this->_apiHelper->sendResponse(200, array(
                    'message' => Constants::IMAGE_UPLOADED_SUCCESSFULLY,
                    'results' => array(
                        'photo_thumbnails' => Yii::app()
                                ->imagesManager
                                ->setImagePath(ImagesManager::getMealWebPath($meal->id) . $this->_photo->name)
                                ->setSizes(helper::yiiparam('sizes_for_photos_of_meals'))
                                ->getImageThumbnails()
                    )
                ));
            } else {
                $this->_photo->accessStatus(Constants::ACCESS_STATUS_REMOVED);
                $this->_apiHelper->sendResponse(400, array('errors' => $this->_photo->image->error));
            }
        } else {
            $this->_apiHelper->sendResponse(400, array('errors' => $this->_photo->errors));
        }
    }

    function actionAddRatingPhoto($rating_id) {
        /*
         * If rating with given id not found, raise not found error
         */
        if (!$rating = Ratings::model()
                ->findByAttributes(
                array(
                    'id' => $rating_id,
                    'access_status' => array(
                        Constants::ACCESS_STATUS_NEEDS_FOR_ACTION,
                        Constants::ACCESS_STATUS_PUBLISHED
                    )
                ))) {
            $this->_apiHelper->sendResponse(400, array(
                'errors' => sprintf(Constants::NO_RATING_WAS_FOUND, $rating_id)
            ));
        }

        if (!is_null($rating->photo_id)) {
            $this->_apiHelper->sendResponse(400, array('errors' => Constants::PHOTO_ATTACHED_TO_RATING));
        }

        /*
         * Is meal with $id exists
         */
        if (!$meal = Meals::model()
                ->findByAttributes(
                array(
                    'id' => $rating->meal_id,
                    'access_status' => array(
                        Constants::ACCESS_STATUS_NEEDS_FOR_ACTION,
                        Constants::ACCESS_STATUS_PUBLISHED
                    )
                ))) {
            $this->_apiHelper->sendResponse(400, array(
                'errors' => sprintf(Constants::NO_MEAL_WAS_FOUND, $rating->meal_id)
            ));
        }

        $this->_image_field_name = 'image';

        $this->_setPhoto($meal->id);

        /* on validate we save photo */
        if ($this->_photo->save()) {
            $this->_setPhotosPath($meal->id);
            if ($this->_photo->image->saveAs($this->_photo_path)) {
                /* Create thimbnails for meal photo for registered image sizes */
                $images_manager = Yii::app()->imagesManager;
                $images_manager
                        ->setImagePath($this->_photo_path)
                        ->setSaveTo($this->_meal_dir)
                        ->setExt($this->_photo->image->extensionName)
                        ->setPrefix($this->_new_image_name . '_')
                        ->setSizes(helper::yiiparam('sizes_for_photos_of_meals'))
                        ->makeThumbnails();

                if ($meal->access_status === Constants::ACCESS_STATUS_NEEDS_FOR_ACTION) {
                    $meal->accessStatus(Constants::ACCESS_STATUS_PUBLISHED);
                }
                
                Photos::makeDefaultPhoto($meal->id);
                $rating->updateByPk($rating_id, array('access_status' => Constants::ACCESS_STATUS_PUBLISHED, 'photo_id' => $this->_photo->id));

                $this->_apiHelper->sendResponse(200, array(
                    'message' => Constants::IMAGE_UPLOADED_SUCCESSFULLY,
                    'results' => array(
                        'photo_thumbnails' => Yii::app()
                                ->imagesManager
                                ->setImagePath(ImagesManager::getMealWebPath($meal->id) . $this->_photo->name)
                                ->setSizes(helper::yiiparam('sizes_for_photos_of_meals'))
                                ->getImageThumbnails()
                        )));
            } else {
                $this->_photo->accessStatus(Constants::ACCESS_STATUS_REMOVED);
                $this->_apiHelper->sendResponse(400, array('errors' => $this->_photo->image->error));
            }
        } else {
            $this->_apiHelper->sendResponse(400, array('errors' => $photo->errors));
        }
    }

    /**
     * Upload image to change or set user avatar image.
     * Uploaded image apply to current logged in user.
     */
    public function actionChangeUserAvatar() {
        $this->_checkForExtension('avatar');

        /* trying to validate file that uploading */
        $image = new ImageValidate('avatar_upload');
        $image->avatar = CUploadedFile::getInstanceByName('avatar');

        if ($image->validate()) {

            $avatar_new_name = ImagesManager::generateNewName(32, $this->_user_info['id'], true);
            $image->name = $avatar_new_name . '.' . $image->avatar->extensionName;
            $image_path = $this->_avatars_dir . '/' . $image->name;


            if ($image->avatar->saveAs($image_path)) {
                $avatar_sizes = helper::yiiparam('sizes_for_user_avatar');
                /* Create thimbnails for avatar for registered image sizes */
                Yii::app()
                        ->imagesManager
                        ->setImagePath($image_path)
                        ->setSaveTo($this->_avatars_dir)
                        ->setExt($image->avatar->extensionName)
                        ->setPrefix($avatar_new_name . '_')
                        ->setSizes($avatar_sizes)
                        ->makeThumbnails();
                /*
                 * If avatar uploaded  not in first time,
                 * we must delete old avatar from server
                 */
                if (!empty($this->_user_info['avatar']))
                    Yii::app()
                            ->imagesManager
                            ->setSizes($avatar_sizes)
                            ->delete($this->_user_info['avatar']);


                if ($user = Users::model()->updateByPk($this->_user_info['id'], array('avatar' => $image->name))) {
                    /*
                     * geting avatar thumbnails
                     */
                    $avatar_thumbs = Yii::app()
                            ->imagesManager
                            ->setImagePath(ImagesManager::getAvatarWebPath($image->name))
                            ->setSizes($avatar_sizes)
                            ->getImageThumbnails();
                    /*
                     * send to user success message and avatar thumnails
                     */
                    $this->_apiHelper->sendResponse(200, array(
                        'results' => $avatar_thumbs,
                        'message' => 'Avatar uploaded successfully')
                    );
                } else {
                    $this->_apiHelper->sendResponse(400, array('errors' => $user->errors));
                }
            } else {
                $this->_apiHelper->sendResponse(400, array('errors' => $image->avatar->error));
            }
        } else {
            $this->_apiHelper->sendResponse(400, array('errors' => $image->errors));
        }
    }

    /**
     *
     */
    private function _setPhoto($meal_id) {

        /*
         * File field 'image' in request is required
         */
        if (!isset($_FILES[$this->_image_field_name])) {
            $this->_apiHelper->sendResponse(400, array('errors' => Constants::IMAGE_REQUIRED));
        }

        $this->_checkForExtension($this->_image_field_name);
        /* apply available attributes to Photos model */
        $this->_setNewImageName();
        $this->_photo = new Photos;
        $this->_photo->image = CUploadedFile::getInstanceByName('image');
        $this->_photo->user_id = $this->_user_info['id'];
        $this->_photo->meal_id = $meal_id;
        $this->_photo->name = $this->_new_image_name . '.' . $this->_photo->image->extensionName; //rename file
        $this->_photo->mime = CFileHelper::getMimeTypeByExtension($this->_photo->name);
        $this->_photo->size = $this->_photo->image->size;
    }

    /**
     *
     * @param string $file_name
     */
    private function _checkForExtension($file_name) {
        if (
                isset($_FILES[$file_name]) &&
                !ImagesManager::isValidExtension($_FILES[$file_name]['tmp_name']) &&
                ($ext = ImagesManager::isValidMime($_FILES[$file_name]['tmp_name']))
        ) {
            $_FILES[$file_name]['name'].='.' . $ext;
        }
    }

    /**
     * Setter for $_new_image_name
     * @param string $image_name
     * @return \ImagesController
     */
    private function _setNewImageName($image_name = null) {
        if (!is_null($image_name)) {
            $this->_new_image_name = $image_name;
        } else {
            $this->_new_image_name = ImagesManager::generateNewName(24, null, true);
        }
        return $this;
    }

    /**
     *
     * @param type $meal_id
     * @return type
     */
    private function _setPhotosPath($meal_id) {
        /* for each meal on server we have it own folder */
        $this->_meal_dir = $this->_meals_photos_dir . '/' . $meal_id;
        if (!is_dir($this->_meal_dir)) {
            mkdir($this->_meal_dir, 0755);
        }
        $this->_photo_path = $this->_meal_dir . '/' . $this->_photo->name;
    }

}
